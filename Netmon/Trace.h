#pragma once
//
// Software Tracing Definitions 
//
#define WPP_CONTROL_GUIDS \
    WPP_DEFINE_CONTROL_GUID(MsnMntrNotify,(aca2f74a, 7a0d, 4f47, be4b, 66900813b8e5),  \
        WPP_DEFINE_BIT(TRACE_CLIENT_SERVER)                 \
        WPP_DEFINE_BIT(TRACE_PEER_TO_PEER)                  \
        WPP_DEFINE_BIT(TRACE_UNKNOWN)                       \
        WPP_DEFINE_BIT(TRACE_ALL_TRAFFIC) )

#define WPP_LEVEL_FLAGS_LOGGER(lvl,flags) WPP_LEVEL_LOGGER(flags)
#define WPP_LEVEL_FLAGS_ENABLED(lvl, flags) (WPP_LEVEL_ENABLED(flags) && WPP_CONTROL(WPP_BIT_ ## flags).Level  >= lvl)

#pragma warning(disable:4204) // C4204 nonstandard extension used : non-constant aggregate initializer

// define the 'xstr' structure for logging buffer and length pairs

// and the 'log_xstr' function which returns it to create one in-place.

// this enables logging of complex data types.

typedef struct xstr { char * _buf; short  _len; } xstr_t;

__inline xstr_t log_xstr(size_t length, void * p) {

	if (length >= MAXSHORT) {

		xstr_t xs = { (char*)p,MAXSHORT };

		return xs;

	}
	else {

		xstr_t xs = { (char*)p,(SHORT)length };

		return xs;

	}

}

// define the macro required for a hexdump

// use as:
// begin_wpp config
//   FUNC DoTrace(( "%!HEXDUMP!\n", log_xstr(buffersize,(char *)buffer) ));
// end_wpp
//

#define WPP_LOGHEXDUMP(x) WPP_LOGPAIR(2, &((x)._len)) WPP_LOGPAIR((x)._len, (x)._buf)


